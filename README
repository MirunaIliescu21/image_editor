// Copyright Iliescu Miruna-Elena 312CA

Programul imagne_editor.c prelucreaza fisiere de tip imagine, realizand operatii
la nivelul fotografiilor precum un editor foto.

Inainte de a se incepe realizarea operatiilor se declara doua structuri de date:
structura imagine care contine toate datele unei imagini: parametrul magic
(tipul imaginii P2, P3, P5, P6), dimensiunile imaginii, valoarea maxima a
pixelilor, o matrice de tip int si o matrice de tipul color_rgb care reprezinta
o alta structura cu trei campuri asociate celor trei culori rosu, verde si 
albastru.
Matricea de tip int stocheaza pixelii imagilor Grayscale (cu tonuri gri), iar
matricea de tipul color_rgb stocheaza pixelii imaginilor Color, fiecare pixel
avand 3 canale de culoare - rosu, verde si albastru.
In plus, structura imagine mai contine si doua campuri ce vor retine
coordonatele in urma operatiei de selectie.
mat_gri[][], mat_color[][];

Programul contine mai multe functii, unele se vor folosi doar pentru realizarea
operatiilor cerute, iar altele se refolosesc pe parcursul rezolvarii temei.
De exemplu, functiile de alocare de memorie  si de eliberare de memorie atat
pentru matricea imaginii gri, cat si pentru cea color sunt utilizate in mod
repetat. Implementarea acestor functii folosesc programarea defensiva pentru
a nu avea erori de memorie.

Rezolvarea operatiilor cerute:
1. LOAD = incarcarea unei imagini in memorie
Functia incarcare_imagine are ca scop incarcarea in memorie a unei imagini.
Se deschide fisierul in modul text.
Se citesc datele despre imagine si se afla tipul imaginii: P2, P5 Grayscale sau
P3, P6 Color si modul in care trebuie deschis fisierul. Daca fisierul este text
se continua  operatia, iar daca este binar se folosesc functiile ftell si fseek
pentru a retine pozitia cursorului ca sa putem inchide fisierul si sa il
redeschidem in mod binar la pozitia ramasa. In functie de tipul imaginii se
aloca memorie apeland functia corespunzatoarea si se citesc datele cu fscanf()
pentru fisierele de tip text, repectiv fread() pentru fisierele binare.
De asemenea, este necesara o functie care sa elimine comentarile din aceste
fisiere. Implementarea acesteia presupune citirea primului caracter de pe rand
si compararea sa cu cu "#". Daca sunt la fel inseamna ca toata linia este un 
comentariu si este ignorata.

2. SAVE = salvarea fisierelor tip ASCII/binar
Functiile de salvare sunt diferite pentru cele doua moduri de fisiere: text sau
binar. Daca in inputul comenzii lipseste cel de al treilea parametru inseamna
ca fisierul va fi salvat de tip binar, adica datele imaginii vor fi stocate cu
ajutorul functiei fwrite(), iar daca al treilea parametru este "ascii" atunci
datele vor fi scrise in fisier prin intermetiul functiei fprintf(). In plus, 
dupa ce am aflat modul in care vrem sa scriem in fisier, este important sa 
deschidem fisierul in modul corespunzator scrierii aferente.

In cazul mat_color[][] se iau pe rand cele trei campuri de coloare si se
citesc sau se scriu separat.
De asemenea, este important sa inchidem fisierele dupa ce am lucrat cu ele.

3. SELECT = selecteaza o portiune din imagine fara a o modifica
Exista doua tipuri de select: SELECT ALL sau SELECT <x1> <y1> <x2> <y2>
SELECT ALL presupune atribuirea coordonatelor de selectie dimensiunea
intregii imagini.
SELECT <x1> <y1> <x2> <y2> presupune atribuirea unor dimensiuni mai mici
decat dimensiunile imaginii initiale. 
Pentru aceste doua operatiuni am implementat cate o functie care verifica
parametrii inputului, urmand, in cazul in care totul este conform conditiilor
impuse de cerinta problemei sa se actualizeze coordonatele selectiei.

4. CROP = decuparea imaginii
Exista doua tipuri de functii care decupeaza imaginea in functie de tipul ei:
daca imag este gri se apeleaza taie_gri, iar daca este color se apeleaza 
taie_color. Ideea acestor functii de taiere, este folorirea unei matrici
auxiliare, alocata dinamic, in care se copiaza doar valorile delimitate de
coordonatele de selectie. Se eliberea si se aloca din noua o memorie matricii
de pixelei, executandu-se copierea matricii auxiliare. Diferenta dintre cele
doua functii de taiere este tipul matricii auxiliare si modul in care se face
alocarea si eliberarea memorie in functie de coloarea pixelilor.

5. APPLY = aplicarea anumitor filtre
Functia aplicare se executa doar de imagini color. Se verifica acest lucru
impreuna cu paramtrii ce denumesc filtrele ce trebuie aplicate.
Se verfica ce filtru trebuie aplicat prin functia alege_filtru, fiecare filtru
are un numar si in functie de aceasta se stie cu ce matrice nucleu lucram.
Matricea nucleu este specifica fiecarui filtru, avand o dimenisune de 3x3 si
date de tip double. Creez o functie de initializare a acestor matrici, 
utilizandu-se doar cea asociata filtrului ce trebuie aplicat. 
Se lucreaza cu o copie, alocata dinamic,  ce este de tip cub care tine locul 
matricei de culoare impreuna cu campul pentru cei trei pixeli rosu, verde si
albastru, deaorece in timpul efectuarii operatiilor pe campurile pixelilor de
culoare matricea initiala isi va schimba valorile.
Dupa realizarea operatiei de inmultimele a valorilor nucleului cu 
vecinii fiecarui pixel, inclusiv el insusi si adunarea lor, rezultatul se 
rotunjeste prin functia round() si prin incadrarea lui in intervalul [0,255] cu
ajutorul functiei clamp(). La final se copiaza matricea obtinuta in matricea
initiala. De observat este ca toti pixeli din matrice s-au schimbat cu exceptia
pixelilor de pe margine, deoarece acestia nu au 8 vecini ceea ce inseamna ca
daca am suprapune matricea nucleu peste pixeli din margine operatia nu s-ar
putea realiza.

6. HISTOGRAM
Functia realizeaza histograma imaginii cu x stetule si y binuri.
Se aloca dinamic un vector de frecventa si ce calculeaza frecventa fiecarei
valori de la 0 la 255. Dupa aceea, se apeleaza functia de egalizare_histograma
pentru a obtine y elemente. Aceteste y elemente se obtine prin adunarea din 
a 256 impartit la y frecvente de elemete, adica se reconstruieste un alt vector
de frecventa pentru a optimiza noatele de gri, deoarece omul oricum nu poate
percepe 255 de nuante de gri. Apoi, se calc maximul frecventei si se aplica
formula din documantatia temei pt a calc numarul de stelute intr-o alta functie
separat. La final, se afiseaza histograma.

7. EQUALIZE
Acesta functie se bazeaza tot pe frecventa pixelilor si schimba pixelii unei
imagini gri in functie de o formula data in documentatia temei.
Se calculeaza frecventa pixelilor si apoi se pargurge fiecare element al 
matricii. In valoarea auxiliara se calculeaza printr-o functie suma
frecventelor elementelor pana la elementul curent si se inmulteste cu 255 si cu
1 / aria  imaginii. Rezultatul se rotunjeste si i se aplica si functia clamp().

8. ROTATE
Functia aceasta roteste toata imaginea sau doar o portiune selectata. 
Pentru realizarea acestei operatii am implementat 4 functii diferite:
2 pt color, una care roteste toata imaginea si una care roteste doar partea
selectat si 2 pt gri care fac acelasi lucru.
A fost necesara implemetarea functiilor pe culori, deoarece se folosesc matrici
auxiliare carora li se aloca memorie in functie de tipul datelor imaginii 
initiale.
Unghiurile de rotatie sunt doar multiplii negativi si pozitivi ai lui 90
cuprinsi in intervalul [-360,360]; ceea ce inseamna ca imaginea poate fi rotita
de maxim 3 ori, apeland una dintre cale 4 functii de mai sus de mai multe ori.
Aflam numarul de rotiri necesare pentru a satisface cerinta prin apelarea 
functii rotire_multipla() care ne returneaza de cate ori trebuie sa reapelam
aceeasi functie in functie de caz. 
Procesul de rotire are la baza copierea elemetelor intr-o matrice auxiliara
alocata dinamic ce are numarul de linii si de coloara interschimbat fata de 
matricea initiala. Dupa se elibereaza matricea initiala, i se aloca din nou
memorie cu noile dimensiuni, adica numarul de linii a interschimbat cu cel de
coloane si se copiaza matricea auxiliara, urmand ca apoi sa se elibereze
memoria matricei auxiliare.

9. EXIT = se incheie programul
Functia de iesire presupune eliberarea intregii memorii utilizate si oprirea
executiei programului.
Functia de eliberare a mai fost folosita si in cadrul altor functii pentru a ne
asigura ca nu lucram cu mai multe imagini incarcate in memorie, urmarind o 
eficienta din punct de vedere al memoriei.
